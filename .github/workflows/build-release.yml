name: Build and Release OpenSUSE Kernel with T2 Patches

on:
  push:
    tags:
      - 'v*'  # e.g., v6.6.21-t2
  workflow_dispatch:
    inputs:
      version:
        description: 'Kernel version (e.g., 6.6.21)'
        required: true

env:
  ARCH: x86_64
  STABLE_BRANCH: stable

jobs:
  build-release:
    runs-on: ubuntu-latest
    container:
      image: opensuse/tumbleweed:latest
      options: --privileged

    steps:
    - name: Set up version variable
      id: vars
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          VERSION=$(echo "${GITHUB_REF#refs/tags/v}" | cut -d'-' -f1)
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        fi

    - name: Install build dependencies
      run: |
        zypper --non-interactive refresh
        zypper --non-interactive install \
          git make gcc flex bison bc libopenssl-devel \
          ncurses-devel perl python3 rpm-build \
          patch cpio xz gzip rsync kmod hostname \
          elfutils libdw-devel libelf-devel dwarves findutils

    - name: Clone OpenSUSE kernel
      run: |
        git clone --depth=1 --branch=${{ env.STABLE_BRANCH }} https://github.com/openSUSE/kernel.git
        cd kernel
        git submodule update --init --recursive

    - name: Checkout specified kernel version
      if: steps.vars.outputs.VERSION != ''
      working-directory: ./kernel
      run: |
        git fetch --tags
        git checkout ${{ steps.vars.outputs.VERSION }}

    - name: Clone T2 patches
      run: |
        git clone --depth=1 https://github.com/t2linux/linux-t2-patches.git

    - name: Apply T2 patches
      working-directory: ./kernel
      run: |
        for patch in ../linux-t2-patches/*.patch; do
          patch -p1 < "$patch"
        done

    - name: Configure the kernel
      working-directory: ./kernel
      run: |
        make defconfig
        ./scripts/config --set-str CONFIG_LOCALVERSION "-t2"
        ./scripts/config --enable CONFIG_BLK_DEV_INITRD
        ./scripts/config --enable CONFIG_64BIT
        ./scripts/config --enable CONFIG_MODULES
        ./scripts/config --enable CONFIG_EFI_STUB
        ./scripts/config --enable CONFIG_EFI
        ./scripts/config --enable CONFIG_FB
        ./scripts/config --enable CONFIG_FRAMEBUFFER_CONSOLE
        make olddefconfig

    - name: Clean tree and preserve config
      working-directory: ./kernel
      run: |
        cp .config ../.kernel_config
        git clean -fdx
        git reset --hard
        mv ../.kernel_config .config

    - name: Build kernel RPMs
      working-directory: ./kernel
      run: |
        export BUILD_HOST=github-runner
        make -j$(nproc) rpm-pkg

    - name: Locate built RPMs
      id: findrpms
      run: |
        mkdir -p /artifacts
        find ~/rpmbuild -type f -name "*.rpm" -exec cp {} /artifacts/ \;
        ls -lh /artifacts
        echo "RPM_COUNT=$(ls /artifacts | wc -l)" >> $GITHUB_OUTPUT

    - name: Upload RPMs
      uses: actions/upload-artifact@v4
      with:
        name: kernel-rpms
        path: /artifacts/*.rpm

    - name: Create GitHub Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: /artifacts/*.rpm
        generate_release_notes: true
